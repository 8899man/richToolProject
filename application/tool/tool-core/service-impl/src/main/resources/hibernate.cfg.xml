<?xml version="1.0" encoding="UTF-8"?>
<!--
表明解析本XML文件的DTD文档位置，DTD是Document Type Definition 的缩写,即文档类型的定义,
XML解析器使用DTD文档来检查XML文件的合法性。hibernate.sourceforge.net/hibernate-configuration-3.0dtd
可以在Hibernate3.1.3软件包中的src\org\hibernate目录中找到此文件
-->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <!--
        表明以下的配置是针对session-factory配置的，SessionFactory是Hibernate中的一个类,
        这个类主要负责保存Hibernate的配置信息，以及对Session的操作
    -->
    <session-factory>
        <!-- 数据库连接信息 -->
        <property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
        <property name="hibernate.connection.url">jdbc:postgresql://192.168.3.14:5432/qaotmsopenapi</property>
        <property name="hibernate.connection.username">jetty</property>
        <property name="hibernate.connection.password">jetty</property>

        <!-- hibernate 基本属性配置 -->
        <!--
            1.输出底层sql
            2.输出sql的语句格式
            3.是否自动建表:
                validate 每次加载自动验证
                create 每次删除原有的再创建
                update 第一次创建, 之后更新
                create-drop 程序关闭, 自动删除
            4.数据库方言, 让hibernate知道那个库的语句, 如分页在mysql中使用关键字limit, 但是在oracle中只能用rownum.
                根据底层的数据库不同产生不同的 sql 语句，Hibernate 会针对数据库的特性在访问时进行优化.
        -->
        <property name="hibernate.show_sql">true</property>
        <property name="hibernate.format_sql">true</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="hibernate.dialect">org.hibernate.dialect.PostgreSQL94Dialect</property>
        <!--<property name="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</property>-->

        <!-- c3p0 连接池 -->
        <property name="hibernate.c3p0.max_size">10</property>
        <property name="hibernate.c3p0.min_size">5</property>
        <property name="c3p0.acquire_increment">2</property>
        <property name="c3p0.idle_test_period">2000</property>
        <property name="c3p0.timeout">2000</property>
        <property name="c3p0.max_statements">10</property>

        <!--  ********************数据库连接池的大小***************************
            1.hibernate.c3p0.max_size: 数据库连接池的最大连接数
            2.hibernate.c3p0.min_size: 数据库连接池的最小连接数
            3.hibernate.c3p0.acquire_increment: 当数据库连接池中的连接耗尽时, 同一时刻获取多少个数据库连接
            4.hibernate.c3p0.timeout:   数据库连接池中连接对象在多长时间没有使用过后，就应该被销毁
            5.hibernate.c3p0.idle_test_period:  表示连接池检测线程多长时间检测一次池内的所有链接对象是否超时.
                连接池本身不会把自己从连接池中移除，而是专门有一个线程按照一定的时间间隔来做这件事，
                这个线程通过比较连接对象最后一次被使用时间和当前时间的时间差来和 timeout 做对比，进而决定是否销毁这个连接对象。
            6.缓存 Statement 对象的数量
        -->

        <!--  ********************其他设置***************************
            连接池
            1.jdbc.fetch_size 实质是调用Statement.setFetchSize() 方法设定 JDBC 的 Statement 读取数据的时候每次从数据库中取出的记录条数。
                Fetch Size设的越大，读数据库的次数越少，速度越快，Fetch Size越小，读数据库的次数越多，速度越慢
            2.jdbc.batch_size 设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小，类似于设置缓冲区大小的意思。
                Batch Size越大，批量操作的向数据库发送Sql的次数越少，速度就越快，同样耗用内存就越大
            3.jdbc.use_scrollable_resultset 是否允许Hibernate用JDBC的可滚动的结果集,对分页的结果集.对分页时的设置非常有帮助
            4.connection.useUnicode连 接数据库时是否使用Unicode编码
            5.connection.characterEncoding 连接数据库时数据的传输字符集编码方式，最好设置为gbk，用gb2312有的字符不全
            6.isolation 设置事务的隔离级别
            7.use_identifier_rollback 删除对象后，使其OID置为null
        <property name="jdbc.use_scrollable_resultset">false </property>
        -->
        <property name="hibernate.connection.pool.size">20 </property>
        <property name="jdbc.fetch_size">50 </property>
        <property name="jdbc.batch_size">23 </property>
        <property name="jdbc.use_scrollable_resultset">false </property>
        <property name="Connection.useUnicode">true </property>
        <property name="connection.characterEncoding">gbk</property>
        <property name="connection.isolation">2</property>
        <property name="use_identifier_rollback">true</property>

        <!-- 使用getCurrentSession() 方法获取session时必须在配置文件中添加此属性. -->
        <!--<property name="hibernate.current_session_context_class">thread</property>-->

        <!-- 加载bean.xml 使用注解则不需要 -->
        <mapping resource="..."/>
    </session-factory>
</hibernate-configuration>